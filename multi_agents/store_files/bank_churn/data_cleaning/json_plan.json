[
    {
        "task": "Remove Duplicates",
        "tools, involved features and correct parameters": [
            "Tool: remove_duplicates",
            "Involved features: All columns",
            "Parameters for train_data: remove_duplicates(data=train_data, columns=None, keep='first', inplace=True)",
            "Parameters for test_data: remove_duplicates(data=test_data, columns=None, keep='first', inplace=True)"
        ],
        "expected output or impact on data": [
            "Cleaned datasets without any duplicate rows."
        ],
        "constraints": [
            "Ensure no valuable data is lost during the removal process."
        ]
    },
    {
        "task": "Detect and Handle Outliers",
        "tools, involved features and correct parameters": [
            "Tool: detect_and_handle_outliers_iqr",
            "Involved features: CreditScore, Age, Tenure, Balance, EstimatedSalary",
            "Parameters for train_data: detect_and_handle_outliers_iqr(data=train_data, columns=['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary'], factor=1.5, method='clip')",
            "Parameters for test_data: detect_and_handle_outliers_iqr(data=test_data, columns=['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary'], factor=1.5, method='clip')"
        ],
        "expected output or impact on data": [
            "Datasets with outliers detected and handled by clipping them to the threshold values."
        ],
        "constraints": [
            "Ensure the method used does not distort the data distribution significantly."
        ]
    },
    {
        "task": "Ensure Consistency in Data Types",
        "tools, involved features and correct parameters": [
            "Tool: convert_data_types",
            "Involved features: Numerical: CreditScore, Age, Tenure, Balance, EstimatedSalary; Binary: HasCrCard, IsActiveMember",
            "Parameters for train_data: convert_data_types(data=train_data, columns=['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary'], target_type='float'); convert_data_types(data=train_data, columns=['HasCrCard', 'IsActiveMember'], target_type='int')",
            "Parameters for test_data: convert_data_types(data=test_data, columns=['CreditScore', 'Age', 'Tenure', 'Balance', 'EstimatedSalary'], target_type='float'); convert_data_types(data=test_data, columns=['HasCrCard', 'IsActiveMember'], target_type='int')"
        ],
        "expected output or impact on data": [
            "Consistent data types across both datasets."
        ],
        "constraints": [
            "Maintain data integrity and ensure no data loss during conversion."
        ]
    },
    {
        "task": "Align Categorical Values",
        "tools, involved features and correct parameters": [
            "Tool: pd.Categorical from pandas library",
            "Involved features: Geography, Gender",
            "Parameters: train_data['Geography'] = pd.Categorical(train_data['Geography']); train_data['Gender'] = pd.Categorical(train_data['Gender']); test_data['Geography'] = pd.Categorical(test_data['Geography']); test_data['Gender'] = pd.Categorical(test_data['Gender'])"
        ],
        "expected output or impact on data": [
            "Consistent categorical values across both datasets."
        ],
        "constraints": [
            "Ensure that the categories in Geography and Gender are consistent."
        ]
    }
]