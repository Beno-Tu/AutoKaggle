### Step 1: Analyze the Error

The error message `ValueError: Per-column arrays must each be 1-dimensional` indicates that while trying to create a DataFrame with the predictions, the arrays provided for each column are not 1-dimensional. This suggests that the `multi_target_model.predict_proba(X_test)` method is returning arrays with more than one dimension.

### Step 2: Understand the Structure of Predictions

In multi-output classification, the `predict_proba` method typically returns a list where each element is an array of probabilities for a specific target variable. Each of these arrays should be 2-dimensional (samples x classes).

### Step 3: Correct the Code

To resolve this, we need to ensure that each column in our DataFrame corresponds to a single class probability for each target variable. We'll flatten the structure so that each class's probability is a separate column in the DataFrame.

Hereâ€™s how to do it:

1. Iterate over each target's predictions.
2. For each target, iterate over each class's probability.
3. Create a column for each class's probability.

### Corrected Code

```python
# Predict probabilities for each defect category using the best model
predictions = multi_target_model.predict_proba(X_test)

# Flatten the predictions into a DataFrame with columns for each class probability
predictions_dict = {}
for i, target in enumerate(target_columns):
    for class_idx in range(predictions[i].shape[1]):
        predictions_dict[f"{target}_class_{class_idx}"] = predictions[i][:, class_idx]

# Create the DataFrame from the dictionary
predictions_df = pd.DataFrame(predictions_dict)
```

### Explanation
- `predictions` is a list of 2D arrays, where each array corresponds to the probabilities for a particular target variable.
- We iterate over each target and then over each class's probability for that target.
- We build a dictionary where each key is a column name (indicating the target and the class) and the value is the array of probabilities for that class.
- Finally, we create the DataFrame from this dictionary.

This should resolve the `ValueError` by ensuring that each column in the DataFrame is 1-dimensional.