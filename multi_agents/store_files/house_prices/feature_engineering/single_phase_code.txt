
import pandas as pd

# Load the cleaned datasets
train_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train.csv')
test_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test.csv')

# Function to create new features
def create_new_features(df):
    df_copy = df.copy()
    df_copy['HouseAge'] = df_copy['YrSold'] - df_copy['YearBuilt']
    df_copy['YearsSinceRemod'] = df_copy['YrSold'] - df_copy['YearRemodAdd']
    df_copy['TotalBath'] = df_copy['FullBath'] + 0.5 * df_copy['HalfBath'] + df_copy['BsmtFullBath'] + 0.5 * df_copy['BsmtHalfBath']
    df_copy['TotalPorchSF'] = df_copy['OpenPorchSF'] + df_copy['EnclosedPorch'] + df_copy['3SsnPorch'] + df_copy['ScreenPorch']
    df_copy['TotalSF'] = df_copy['TotalBsmtSF'] + df_copy['1stFlrSF'] + df_copy['2ndFlrSF']
    df_copy['OverallQual_SF'] = df_copy['OverallQual'] * df_copy['GrLivArea']
    return df_copy

# Create new features for both train and test datasets
train_df = create_new_features(train_df)
test_df = create_new_features(test_df)

# Save the datasets with new features
train_df.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_with_new_features.csv', index=False)
test_df.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_with_new_features.csv', index=False)

print("New features created and datasets saved.")


import numpy as np
from sklearn.preprocessing import StandardScaler

# Load the datasets with new features
train_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_with_new_features.csv')
test_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_with_new_features.csv')

# Function to apply log1p transformation
def log_transform(df, columns):
    df_copy = df.copy()
    for col in columns:
        df_copy[col] = np.log1p(df_copy[col])
    return df_copy

# Columns to transform
log_transform_columns = ['LotArea', 'GrLivArea']
train_log_transform_columns = log_transform_columns + ['SalePrice']

# Apply log transformation
train_df_transformed = log_transform(train_df, train_log_transform_columns)
test_df_transformed = log_transform(test_df, log_transform_columns)

# Save the datasets
train_df_transformed.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_log_transformed.csv', index=False)
test_df_transformed.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_log_transformed.csv', index=False)

print("Log transformation applied and datasets saved.")


from sklearn.preprocessing import LabelEncoder

# Load the transformed datasets
train_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_log_transformed.csv')
test_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_log_transformed.csv')

# Function to label encode ordinal features
def label_encode_features(df, columns):
    df_copy = df.copy()
    le = LabelEncoder()
    for col in columns:
        df_copy[col] = le.fit_transform(df_copy[col])
    return df_copy

# Ordinal features to label encode
ordinal_features = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', 'HeatingQC', 'KitchenQual', 'GarageQual', 'GarageCond', 'PoolQC', 'Fence']

# Apply label encoding
train_df_encoded = label_encode_features(train_df, ordinal_features)
test_df_encoded = label_encode_features(test_df, ordinal_features)

# Function to one-hot encode nominal features
def one_hot_encode_features(train_df, test_df, columns, target_column='SalePrice'):
    train_df_copy = pd.get_dummies(train_df, columns=columns)
    
    # Ensure the target column is removed from the test dataset
    if target_column in test_df.columns:
        test_df = test_df.drop(columns=[target_column])
    
    test_df_copy = pd.get_dummies(test_df, columns=columns)
    
    # Align the columns of test_df with train_df
    test_df_copy = test_df_copy.reindex(columns=train_df_copy.columns, fill_value=0)
    
    # Ensure the target column is removed after reindexing
    if target_column in test_df_copy.columns:
        test_df_copy = test_df_copy.drop(columns=[target_column])
    
    return train_df_copy, test_df_copy

# Nominal features to one-hot encode
nominal_features = ['MSZoning', 'Street', 'Alley', 'Neighborhood', 'HouseStyle', 'RoofStyle', 'Condition1', 'Condition2', 'BldgType']

# Make sure the target column is not present in the test dataset before encoding
if 'SalePrice' in test_df_encoded.columns:
    test_df_encoded = test_df_encoded.drop(columns=['SalePrice'])

train_df_encoded, test_df_encoded = one_hot_encode_features(train_df_encoded, test_df_encoded, nominal_features)

# Save the encoded datasets
train_df_encoded.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_encoded.csv', index=False)
test_df_encoded.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_encoded.csv', index=False)

print("Categorical variables encoded and datasets saved.")


from sklearn.preprocessing import StandardScaler

# Load the encoded datasets
train_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train_encoded.csv')
test_df = pd.read_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test_encoded.csv')

# Ensure the target column is removed from the test dataset before standardizing
if 'SalePrice' in test_df.columns:
    test_df = test_df.drop(columns=['SalePrice'])

# Columns to standardize
numerical_features = ['LotArea', 'GrLivArea', '1stFlrSF', '2ndFlrSF', 'TotalBsmtSF', 'HouseAge', 'OverallQual_SF']

# Ensure all numerical features exist in both datasets
numerical_features = [feature for feature in numerical_features if feature in train_df.columns and feature in test_df.columns]

# Standardize the numerical features
scaler = StandardScaler()
train_df[numerical_features] = scaler.fit_transform(train_df[numerical_features])
test_df[numerical_features] = scaler.transform(test_df[numerical_features])

# Save the standardized datasets
train_df.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/processed_train.csv', index=False)
test_df.to_csv('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/processed_test.csv', index=False)

print("Numerical features standardized and datasets saved.")
