
import pandas as pd

# Load the datasets
train_path = '/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/processed_train.csv'
test_path = '/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/processed_test.csv'

train_df = pd.read_csv(train_path)
test_df = pd.read_csv(test_path)

# Separate the target variable
y_train = train_df['SalePrice']
X_train = train_df.drop(columns=['SalePrice'])

# Identify non-numeric columns
non_numeric_columns = X_train.select_dtypes(exclude=['number']).columns

# Remove non-numeric columns from both datasets
X_train = X_train.drop(columns=non_numeric_columns)
X_test = test_df.drop(columns=non_numeric_columns)

# Ensure consistent features between train and test sets
assert set(X_train.columns) == set(X_test.columns), "Mismatch in features between train and test sets"

print("Data Preparation completed successfully.")


from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor

# Define the models
models = {
    'Linear Regression': LinearRegression(),
    'Random Forest Regressor': RandomForestRegressor(random_state=42),
    'Gradient Boosting Regressor': GradientBoostingRegressor(random_state=42)
}

print("Model Selection completed successfully. Models selected:")
print("\n".join(models.keys()))


from sklearn.model_selection import cross_val_score
from sklearn.metrics import mean_squared_error
import numpy as np

# Function to calculate RMSE
def rmse_cv(model, X, y):
    rmse = np.sqrt(-cross_val_score(model, X, y, scoring="neg_mean_squared_error", cv=5))
    return rmse

# Train and validate the models
model_performance = {}
for name, model in models.items():
    score = rmse_cv(model, X_train, y_train)
    model_performance[name] = score
    print(f"{name} RMSE: {score.mean():.4f} (+/- {score.std():.4f})")

# Identify the best performing model
best_model_name = min(model_performance, key=lambda k: model_performance[k].mean())
best_model = models[best_model_name]

print(f"Best model: {best_model_name}")


import numpy as np
import pandas as pd

# Fit the best model on the entire training set
best_model.fit(X_train, y_train)

# Make predictions on the test set
predictions = best_model.predict(X_test)

# Reverse the log transformation
predictions = np.exp(predictions)

# Prepare the submission file
submission = pd.DataFrame({
    'Id': test_df['Id'],
    'SalePrice': predictions
})

# Save the submission file
submission_path = '/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/submission.csv'
submission.to_csv(submission_path, index=False)

print(f"Predictions and submission file prepared successfully. Submission saved to: {submission_path}")
