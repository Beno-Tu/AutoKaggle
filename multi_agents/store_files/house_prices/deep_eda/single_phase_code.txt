
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# Load cleaned data
train_path = '/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_train.csv'
test_path = '/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/cleaned_test.csv'

train_data = pd.read_csv(train_path)
test_data = pd.read_csv(test_path)

# Univariate Analysis
# Numerical Features
numerical_features = ['SalePrice', 'LotArea', 'GrLivArea', 'TotalBsmtSF', 'OverallQual', 'YearBuilt']

# Summary statistics
print(train_data[numerical_features].describe())

# Histograms
plt.figure(figsize=(12, 10))
for i, feature in enumerate(numerical_features):
    plt.subplot(3, 2, i+1)
    sns.histplot(train_data[feature], kde=True)
    plt.title(f'Distribution of {feature}')
    plt.xlabel(feature)
    plt.ylabel('Frequency')
plt.tight_layout()
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/univariate_numerical_histograms.png')
plt.close()

# Categorical Features
categorical_features = ['MSZoning', 'Neighborhood', 'BldgType', 'HouseStyle']

for feature in categorical_features:
    print(f"\nFrequency of categories in {feature}:")
    print(train_data[feature].value_counts())

# Bivariate Analysis
# Correlation matrix
numeric_train_data = train_data.select_dtypes(include=[np.number])
correlation_matrix = numeric_train_data.corr()

# Heatmap
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=False, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Matrix')
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/correlation_matrix.png')
plt.close()

# Scatter plots for significant numerical features
important_features = ['GrLivArea', 'TotalBsmtSF', 'LotArea', 'OverallQual']

plt.figure(figsize=(12, 10))
for i, feature in enumerate(important_features):
    plt.subplot(2, 2, i+1)
    sns.scatterplot(x=train_data[feature], y=train_data['SalePrice'])
    plt.title(f'{feature} vs SalePrice')
    plt.xlabel(feature)
    plt.ylabel('SalePrice')
plt.tight_layout()
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/bivariate_scatter_plots.png')
plt.close()

# Box plots for key categorical features
plt.figure(figsize=(14, 12))
for i, feature in enumerate(categorical_features):
    plt.subplot(2, 2, i+1)
    sns.boxplot(x=train_data[feature], y=train_data['SalePrice'])
    plt.title(f'{feature} vs SalePrice')
    plt.xlabel(feature)
    plt.ylabel('SalePrice')
    plt.xticks(rotation=90)
plt.tight_layout()
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/bivariate_box_plots.png')
plt.close()

# Feature Interactions
interaction_features = ['GrLivArea', 'TotalBsmtSF', 'OverallQual', 'YearBuilt', 'SalePrice']

# Pairwise scatter plots
sns.pairplot(train_data[interaction_features])
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/pairwise_scatter_plots.png')
plt.close()

# Groupby interaction analysis
interaction_analysis = train_data.groupby(['OverallQual', 'YearBuilt'])['SalePrice'].agg(['mean', 'count']).reset_index()
print(interaction_analysis.head())

# Visualizing Key Insights and Patterns
# Bar plot for OverallQual vs SalePrice
plt.figure(figsize=(10, 6))
sns.barplot(x='OverallQual', y='SalePrice', data=train_data)
plt.title('OverallQual vs SalePrice')
plt.xlabel('OverallQual')
plt.ylabel('SalePrice')
plt.savefig('/mnt/d/PythonProjects/AutoKaggleMaster/multi_agents/competition/house_prices/deep_eda/images/overallqual_vs_saleprice.png')
plt.close()

# Recommendations for Feature Engineering
recommendations = """
1. Consider `OverallQual` as a significant predictor for `SalePrice`.
2. Create interaction features between `OverallQual` and `YearBuilt`.
3. Consider neighborhood-based features, as `Neighborhood` shows significant variance in `SalePrice`.
4. Engineer features to capture the overall property size, combining `GrLivArea`, `TotalBsmtSF`, and `LotArea`.
"""

print(recommendations)
