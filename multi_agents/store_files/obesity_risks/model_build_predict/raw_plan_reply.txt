### Step-by-Step Plan for Model Building, Validation, and Prediction

Given the detailed information about the features and the tools available, here's a clear and specific plan for the current phase:

### Task 1: Data Preparation
**Objective:** Prepare the data for model training and prediction by separating the target variable and ensuring consistency between training and test datasets.

#### Actions:
1. **Separate Target Column (`NObeyesdad`) from Training Set:**
   - **Tool:** pandas
   - **Parameters:**
     ```python
     y = train['NObeyesdad']
     X_train = train.drop(columns=['NObeyesdad'])
     ```
   - **Expected Output:** `y` containing the target variable, and `X_train` with predictors only.

2. **Remove Non-numeric Columns and Irrelevant Columns from Training Set:**
   - Remove columns like `id` and any non-numeric columns that are not encoded.
   - **Tool:** pandas
   - **Parameters:**
     ```python
     X_train = X_train.drop(columns=['id', 'Gender', 'Age_Category', 'FCVC_Category', 'NCP_Category'])
     ```
   - **Expected Output:** `X_train` with only numeric predictors.

3. **Ensure Test Set Consistency:**
   - Apply the same column removal steps to the test set.
   - **Tool:** pandas
   - **Parameters:**
     ```python
     X_test = test.drop(columns=['id', 'Gender', 'Age_Category', 'FCVC_Category', 'NCP_Category'])
     ```
   - **Expected Output:** `X_test` with same structure as `X_train`.

**Constraints:** Ensure that all transformations applied to the training set are identically applied to the test set.

### Task 2: Model Selection and Training
**Objective:** Select and train up to three models based on the data and problem characteristics.

#### Actions:
1. **Choose Models:**
   - **Tool:** `train_and_validation_and_select_the_best_model`
   - **Models to Consider:** RandomForestClassifier, GradientBoostingClassifier, XGBClassifier
   - **Parameters:**
     ```python
     selected_models = ["random forest", "XGBoost", "GradientBoosting"]
     ```

2. **Train Models:**
   - **Tool:** `train_and_validation_and_select_the_best_model`
   - **Parameters:**
     ```python
     best_model = train_and_validation_and_select_the_best_model(
         X=X_train, 
         y=y, 
         problem_type='multiclass', 
         selected_models=["random forest", "XGBoost", "GradientBoosting"]
     )
     ```
   - **Expected Output:** Trained models ready for validation.

**Constraints:** Limit to three models due to resource limitations. Choose models known for handling categorical data and multiclass classification efficiently.

### Task 3: Model Validation
**Objective:** Validate model performance using cross-validation and other metrics.

#### Actions:
1. **Cross-Validation:**
   - **Tool:** scikit-learn
   - **Parameters:**
     ```python
     from sklearn.model_selection import cross_val_score
     scores = cross_val_score(best_model, X_train, y, cv=5, scoring='accuracy')
     print(f"Cross-Validation Accuracy Scores: {scores}")
     ```

2. **Evaluate Metrics:**
   - **Tool:** scikit-learn
   - **Parameters:**
     ```python
     from sklearn.metrics import confusion_matrix, classification_report
     y_pred = cross_val_predict(best_model, X_train, y, cv=5)
     print("Confusion Matrix:\n", confusion_matrix(y, y_pred))
     print("Classification Report:\n", classification_report(y, y_pred))
     ```

**Constraints:** Use a consistent validation strategy (e.g., 5-fold cross-validation) to compare models fairly.

### Task 4: Prediction and Submission File Preparation
**Objective:** Make predictions on the test set and prepare the submission file.

#### Actions:
1. **Make Predictions:**
   - **Tool:** scikit-learn
   - **Parameters:**
     ```python
     predictions = best_model.predict(X_test)
     ```

2. **Prepare Submission File:**
   - **Tool:** pandas
   - **Parameters:**
     ```python
     submission = pd.DataFrame({'id': test['id'], 'NObeyesdad': predictions})
     submission.to_csv('submission.csv', index=False)
     ```
   - **Expected Output:** CSV file in the required submission format.

**Constraints:** Ensure the submission file adheres to the specified format with the correct columns and order.

### Additional Notes
- **Runtime and Efficiency:** Given resource constraints, prioritize models and methods that offer a balance between performance and computational efficiency.
- **Documentation:** Maintain detailed documentation of each step for reproducibility and troubleshooting.

By following this step-by-step plan, you will be able to systematically train, validate, and make predictions using your models while ensuring that all necessary procedures and constraints are adhered to.